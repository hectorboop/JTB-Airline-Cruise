//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace JTB_Airline_Cruise.LocationService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CityServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CityService() {
            this.Url = global::JTB_Airline_Cruise.Properties.Settings.Default.JTB_Airline_Cruise_LocationService_CityService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddCityCompletedEventHandler AddCityCompleted;
        
        /// <remarks/>
        public event GetCitiesCompletedEventHandler GetCitiesCompleted;
        
        /// <remarks/>
        public event DeleteCityCompletedEventHandler DeleteCityCompleted;
        
        /// <remarks/>
        public event UpdateCityCompletedEventHandler UpdateCityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCity(string cityName, string countryName) {
            this.Invoke("AddCity", new object[] {
                        cityName,
                        countryName});
        }
        
        /// <remarks/>
        public void AddCityAsync(string cityName, string countryName) {
            this.AddCityAsync(cityName, countryName, null);
        }
        
        /// <remarks/>
        public void AddCityAsync(string cityName, string countryName, object userState) {
            if ((this.AddCityOperationCompleted == null)) {
                this.AddCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCityOperationCompleted);
            }
            this.InvokeAsync("AddCity", new object[] {
                        cityName,
                        countryName}, this.AddCityOperationCompleted, userState);
        }
        
        private void OnAddCityOperationCompleted(object arg) {
            if ((this.AddCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public City[] GetCities() {
            object[] results = this.Invoke("GetCities", new object[0]);
            return ((City[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesAsync() {
            this.GetCitiesAsync(null);
        }
        
        /// <remarks/>
        public void GetCitiesAsync(object userState) {
            if ((this.GetCitiesOperationCompleted == null)) {
                this.GetCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesOperationCompleted);
            }
            this.InvokeAsync("GetCities", new object[0], this.GetCitiesOperationCompleted, userState);
        }
        
        private void OnGetCitiesOperationCompleted(object arg) {
            if ((this.GetCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesCompleted(this, new GetCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCity(int cityId) {
            this.Invoke("DeleteCity", new object[] {
                        cityId});
        }
        
        /// <remarks/>
        public void DeleteCityAsync(int cityId) {
            this.DeleteCityAsync(cityId, null);
        }
        
        /// <remarks/>
        public void DeleteCityAsync(int cityId, object userState) {
            if ((this.DeleteCityOperationCompleted == null)) {
                this.DeleteCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCityOperationCompleted);
            }
            this.InvokeAsync("DeleteCity", new object[] {
                        cityId}, this.DeleteCityOperationCompleted, userState);
        }
        
        private void OnDeleteCityOperationCompleted(object arg) {
            if ((this.DeleteCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCity(int cityId, string cityName) {
            this.Invoke("UpdateCity", new object[] {
                        cityId,
                        cityName});
        }
        
        /// <remarks/>
        public void UpdateCityAsync(int cityId, string cityName) {
            this.UpdateCityAsync(cityId, cityName, null);
        }
        
        /// <remarks/>
        public void UpdateCityAsync(int cityId, string cityName, object userState) {
            if ((this.UpdateCityOperationCompleted == null)) {
                this.UpdateCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCityOperationCompleted);
            }
            this.InvokeAsync("UpdateCity", new object[] {
                        cityId,
                        cityName}, this.UpdateCityOperationCompleted, userState);
        }
        
        private void OnUpdateCityOperationCompleted(object arg) {
            if ((this.UpdateCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class City {
        
        private int idField;
        
        private string nameField;
        
        private string countryField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AddCityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCitiesCompletedEventHandler(object sender, GetCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public City[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((City[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteCityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UpdateCityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591